/*** 面对对象介绍 ***/

世界万物，皆可分类
世界万物，皆为对象

现实世界中，随处可见的一种事物就是对象，对象是事物存在的实体，如人类、书桌、计算机、高楼大厦等。
人类解决问题的方式总是将复杂的事物简单化，于是就会思考这些对象都是由哪些部分组成的。通常都会将对象划分为两个部分，即静态部分与动态部分。
静态部分，顾名思义，就是不能动的部分，这个部分被称为“属性”，任何对象都会具备其自身属性，如一个人，其属性包括高矮、胖瘦、性别、年龄等。
然而具有这些属性的人会执行哪些动作也是一个值得探讨的部分，这个人可以哭泣、微笑、说话、行走，这些是这个人具备的行为（动态部分），
人类通过探讨对象的属性和观察对象的行为了解对象。
在计算机的世界中，面向对象程序设计的思想要以对象来思考问题，首先要将现实世界的实体抽象为对象，然后考虑这个对象具备的属性和行为。

类：是同一类事物的统称，如果将现实世界中的一个事物抽象成对象，类就是这类对象的统称，如鸟类、家禽类、人类等。
	类是构造对象时所依赖的规范
	类是封装对象的属性和行为的载体，反过来说具有相同属性和行为的一类实体被称为类。
    更为恰当的描述是，类是世间事物的抽象称呼，而对象则是这个事物相对应的实体。
    属性：
        实例变量
        类变量
        私有属性 __var
    方法：
        构造方法
        析构函数：默认就有，如果写了相当于重构
            实例释放，销毁的时候自动执行的，通常做一些收尾工作，如：关闭一些数据库连接，打开的临时文件
        私有方法
    语法：
    class Role(object):             #定义一个类， class是定义类的语法，Role是类名，(object)是新式类的写法，必须这样写，以后再讲为什么
        def __init__(self,name,role,weapon,life_value=100,money=15000):
                                    #初始化函数，在生成一个角色时要初始化的一些属性就填写在这里
            self.name = name        #__init__中的第一个参数self,和这里的self都 是什么意思？ 看下面解释
            self.role = role
            self.weapon = weapon
            self.life_value = life_value
            self.money = money

对象 ： 实例一个类之后得到的对象
    只要是对象，就肯定属于某种品类
    只要是对象肯定有属性
eg：
    你是上帝：构建地球模型

特性：
    class：对一类拥有相同属性的对象的抽象、蓝图、原型。
    object

1.封装
    把一些功能的实现细节不对外暴露，避免了外部操作对内部数据的影响
2.继承
    代码的重用
    单继承
    多继承：（深度优先，广度优先）
        class A:
            def __init__(self):
                print( "A")

        class B(A):
            # def __init__(self):
            # 	print( "B")

        class C(A):
            # def __init__(self):
            # 	print( "C")

        class D(B,C):
            pass

        多继承走向：D-->B-->C-->A(广度优先,Python3都是采用广度优先)
        # 相对的为深度优先D-->B-->A-->C，在python2中，经典类采用深度优先，新式类采用广度优先
    python2中，经典类采用深度优先继承，新式类采用广度优先继承
    Python3中，经典类和新式类都是采用广度优先继承

    新式类：
    class var(object):
        def __init__(全部参数)                        # 先覆盖
            super(var,self).__init__(继承参数)        # 再继承
            self.变量 = 变量                          # 再添加

    组合：
        class var(v1,v2):
            def __init__(self,1,2,3,4,5_obj):               # 5_obj 为另一个类
                super(var,self).__init__(1,2,3)
                self.4 = 4
                self.v3 = 5_obj                             # 将var与5_obj关联起来
3.多态
一种接口，多种实现


私有方法 : def __方法名
私有属性：__变量名

类变量：大家公用的属性，节省开销
class Person：
    cn = "China"                                # 只有一份地址公用
    def __init__(self,name,age,addr,cn = "cn = china"):             #一个实例就生成一份地址
        self.name = name,
        self.cn = cn
实例变量

静态方法：           @staticmethod
    只是名义上归类管理，与类无关实际上在静态方法里访问不了类或实例中的任何属性
类方法：             @classmethod
    只能访问类变量，不能访问实例变量
属性方法：           @property
    把一个方法变成静态属性

__module__    表示当前操作的对象在那个模块
__class__     表示当前操作的对象的类是什么

反射：
    gatattr(obj,str)
    setattr(obj,str,val)            # val可以是变量，属性，方法等
    hasattr(obj,str)
    delattr(obj,str)